#!/bin/bash

# Created by argbash-init v2.10.0
# ARG_HELP([Installs and configures the dotfiles])
# ARG_OPTIONAL_SINGLE([branch],[b],[Branch to install],[origin/main])
# ARG_OPTIONAL_SINGLE([destination],[d],[Install location on filesystem],[~/.config/dotfiles])
# ARG_OPTIONAL_BOOLEAN([worktree],[w],[Create a worktree based on the current repo rather than cloning])
# ARG_OPTIONAL_SINGLE([repo],[r],[Repository to clone. Ignored if --worktree=on.],[https://github.com/chris468/dotfiles])
# ARG_LEFTOVERS([Parameters to pass to configure])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='hbdwr'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_leftovers=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_branch="origin/main"
_arg_destination=~/.config/dotfiles
_arg_worktree="off"
_arg_repo="https://github.com/chris468/dotfiles"


print_help()
{
	printf '%s\n' "Installs and configures the dotfiles"
	printf 'Usage: %s [-h|--help] [-b|--branch <arg>] [-d|--destination <arg>] [-w|--(no-)worktree] [-r|--repo <arg>] ... \n' "$0"
	printf '\t%s\n' "... : Parameters to pass to configure"
	printf '\t%s\n' "-h, --help: Prints help"
	printf '\t%s\n' "-b, --branch: Branch to install (default: 'origin/main')"
	printf '\t%s\n' "-d, --destination: Install location on filesystem (default: '~/.config/dotfiles')"
	printf '\t%s\n' "-w, --worktree, --no-worktree: Create a worktree based on the current repo rather than cloning (off by default)"
	printf '\t%s\n' "-r, --repo: Repository to clone. Ignored if --worktree=on. (default: 'https://github.com/chris468/dotfiles')"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			-b|--branch)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_branch="$2"
				shift
				;;
			--branch=*)
				_arg_branch="${_key##--branch=}"
				;;
			-b*)
				_arg_branch="${_key##-b}"
				;;
			-d|--destination)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_destination="$2"
				shift
				;;
			--destination=*)
				_arg_destination="${_key##--destination=}"
				;;
			-d*)
				_arg_destination="${_key##-d}"
				;;
			-w|--no-worktree|--worktree)
				_arg_worktree="on"
				test "${1:0:5}" = "--no-" && _arg_worktree="off"
				;;
			-w*)
				_arg_worktree="on"
				_next="${_key##-w}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-w" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-r|--repo)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_repo="$2"
				shift
				;;
			--repo=*)
				_arg_repo="${_key##--repo=}"
				;;
			-r*)
				_arg_repo="${_key##-r}"
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names=""
	_our_args=$((${#_positionals[@]} - 0))
	for ((ii = 0; ii < _our_args; ii++))
	do
		_positional_names="$_positional_names _arg_leftovers[$((ii + 0))]"
	done

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

set -e

destination=$_arg_destination
branch=$_arg_branch
configure_options=$_arg_leftovers
use_worktree=$_arg_worktree
repo=$_arg_repo

function worktree_exists {
    git worktree list | awk '{ print $1 }' | grep -q $destination
}

function create_worktree {
    if worktree_exists ; then
        echo "Already installed ($destination already exists)"
        echo "Checking out branch $branch..."
        (cd $destination && git fetch && git checkout --detach $branch)
    else
        echo "Creating installation $destination using branch $branch..."
        git worktree add --detach $destination $branch
    fi
}

function clone_repo {
    if [ -e $destination ] ; then
        [ -e $destination/.git ] || die "$destination exists but does not appear to be a git repo" 1
        echo "Already installed ($destination already exists)"
    else
        echo "Cloning dotfiles $repo branch $branch to $destination..."
        git clone $repo $destination
    fi

    echo "Checking out branch $branch..."
    (cd $destination && git fetch && git checkout $branch)
}

if [ $use_worktree == "on" ]; then
    create_worktree
else
    clone_repo
fi

echo
echo "Configuring..."
$destination/configure-all.sh $configure_options

echo
echo "Complete."

# ] <-- needed because of Argbash
