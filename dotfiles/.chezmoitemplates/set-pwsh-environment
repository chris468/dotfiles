chezmoi:template:missing-key=zero
function Script:Get-Environment(
    [string]$name,
    [bool]$persisted)
{
    $scope = if ($persist) { "User" } else { "Process" }
    [Environment]::GetEnvironmentVariable($name, $scope)
}

function Script:Set-Environment(
    [string]$name,
    [string]$value,
    [bool]$persist)
{
    $scope = if ($persist) { "User" } else { "Process" }
    [Environment]::SetEnvironmentVariable($name, "$value", $scope)
}

function Script:Unset-Environment(
    [string]$name,
    [bool]$persist)
{
    $scope = if ($persist) { "User" } else { "Process" }
    [Environment]::SetEnvironmentVariable($name, $null, $scope)
}

function Script:Prepend-Environment(
      [string]$name,
      [string[]]$values,
      [bool]$persist)
{
    $original=Get-Environment $name $persist
    $originalNormalized=@()
    foreach ($p in $original -split ";") {
        $originalNormalized += $p.ToUpper() -replace "/","\"
    }

    $prepend=""
    foreach ($p in $values) {
        if ($originalNormalized -notcontains ($p.ToUpper() -replace "/","\")) {
            $prepend += "$p;"
        }
    }

    if ($prepend) {
        Set-Environment $name "$prepend$original" $persist
    }
}

{{- range $i, $e := .environment }}
{{-   if not $e.name }}
{{-     fail (list "environment[" $i "] is missing required key `name`." | join "") }}
{{-   end }}
{{-   $persists := $e.persist | default false | ternary (list "$false" "$true") (list "$false") }}
{{-   range $persist := $persists }}
{{-     if eq "set" ($e.action | default "set") }}
Set-Environment "{{ $e.name }}" "{{ $e.value }}" {{ $persist }}
{{-     else if eq "unset" $e.action }}
Unset-Environment "{{ $e.name }}" {{ $persist }}
{{-     else if eq "prepend" $e.action }}
{{-       $valueList := $e.value | kindIs "slice" | ternary $e.value (list $e.value) | reverse }}
Prepend-Environment "{{ $e.name }}" {{ template "toPwshArray" $valueList }} {{ $persist }}
{{-     end }}
{{-   end }}
{{- end }}

