data:
{{- $_local := ".local" -}}
{{- $_localInstall := joinPath $_local "opt" -}}
{{- $_localInstallBin := joinPath $_local "bin" -}}
{{- $_localInstallSbin := joinPath $_local "sbin" -}}
{{- $_dataHome := joinPath $_local "share" -}}
{{- $_configHome := ".config" -}}
{{- $_cacheHome := ".cache" -}}
{{- $_ipython := joinPath $_configHome "ipython" -}}
{{- $_zshConfig := joinPath $_configHome "zsh" -}}
{{- $_zshPlugins := joinPath $_zshConfig "plugins" -}}
{{- $_fzf := joinPath $_localInstall "fzf" -}}
{{- $_fzfBin := joinPath $_fzf "bin" -}}
{{- $_tokyonight := joinPath $_localInstall "tokyonight.nvim" -}}
{{- $_relativePaths := dict
      "local" $_local
      "localInstall" $_localInstall
      "localInstallBin" $_localInstallBin
      "localInstallSbin" $_localInstallSbin
      "asdf" ".asdf"
      "dataHome" $_dataHome
      "configHome" $_configHome
      "fzf" $_fzf
      "fzfBin" $_fzfBin
      "tokyonight" $_tokyonight
      "homebrew" "/opt/homebrew"
      "cacheHome" $_cacheHome
      "ipython" $_ipython
      "gitCredentialManager" (joinPath $_localInstall "git-credential-manager")
      "zshConfig" $_zshConfig
      "zshPlugins" $_zshPlugins
-}}
{{- if eq "windows" .chezmoi.os -}}
{{-   $_relativePaths = set $_relativePaths "bash" (joinPath "C:\\" "Program Files" "git" "bin" "bash.exe") -}}
{{- end -}}
{{- $paths := dict -}}
{{- range $k, $v := $_relativePaths -}}
{{-   $paths = set $paths $k ($v | osIsAbs | ternary $v (joinPath $.chezmoi.homeDir $v)) -}}
{{- end -}}
{{- $paths = set $paths "relative" $_relativePaths -}}

{{- $_defaults := includeTemplate ".chezmoitemplates/configDefaults" (dict "chezmoi" .chezmoi "paths" $paths) | fromYaml }}

{{- $_profile := "profile" | index . | default dict -}}
{{- $work := promptBoolOnce $_profile "work" "Work" false }}
    profile:
        work: {{ $work }}
        swapkeys: {{ "swapkeys" | index $_profile | default false }}

{{ $config := "config" | index . | default dict -}}

{{/* Check for old (the only legacy config I was likely to set) */ -}}
{{ if not ("config" | hasKey .) -}}
{{   $_legacy_ssh_hosts := "ssh_hosts" | index . -}}
{{   if $_legacy_ssh_hosts -}}
{{     $config = set $config "ssh_hosts" $_legacy_ssh_hosts -}}
{{   end -}}
{{   $_legacy_font_size := "size" | index ("font" | index . | default dict) -}}
{{   if and $_legacy_font_size (ne $_legacy_font_size $_defaults.font.size) -}}
{{     $config = set $config "font" (dict "size" $_legacy_font_size) }}
{{   end -}}
{{ end -}}

{{ dict "config" $config | toYaml | indent 4 }}

# ==============================================================================
# ==== Everything past this point is generated, changes will be overwritten ====
# ==============================================================================


{{ $realConfig := $config | mergeOverwrite $_defaults -}}

{{ $availableThemes := list
    "catppuccin-mocha"
    "catppuccin"
    "nord"
    "tokyonight-night"
-}}

{{ if not ($availableThemes | has $realConfig.theme) -}}
{{   fail (printf "Invalid theme '%s'. Available themes: %s." ($realConfig.theme) ($availableThemes | join ", ")) -}}
{{ end -}}

{{ $nvimFlavors := list
    "lvim"
    "nvim-custom"
    "astrovim"
-}}

{{ if and $realConfig.nvim.flavor (not ($nvimFlavors | has $realConfig.nvim.flavor)) -}}
{{   fail (printf "Invalid nvim flavor '%s'. Available flavors: %s, or unset for default." ($realConfig.nvim.flavor) ($nvimFlavors | join ", ")) -}}
{{ end -}}

{{ dict "realConfig" $realConfig | toYaml | indent 4 }}

    paths:
{{ $paths | toYaml | indent 8 }}
        unix:
{{ includeTemplate ".chezmoitemplates/buildUnixPaths" (dict "chezmoi" .chezmoi "paths" $paths) | indent 12 }}
    defaults:
{{ $_defaults | toYaml | indent 8 }}

umask: 0o022

{{- if eq .chezmoi.os "windows" }}
interpreters:
    sh:
        command: {{ $paths.bash }}
    ps1:
        command: pwsh
        args:
            - "-NoLogo"

    cd:
        command: pwsh
{{- end  }}
# vim: set ft=none syntax=yaml ts=4 sw=4 et :
